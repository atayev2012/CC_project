from src.telegram_bot_app.database.select import select_all_genders_info
# user_name - username in telegram app, user_status - if user purchased premium
async def start_text(user_name: str, is_premium: bool = False) -> str:
    result_text = f"–ü—Ä–∏–≤–µ—Ç @{user_name}! –Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –æ–¥–µ–∂–¥—ã."
    if not is_premium:
        result_text += (f"\n–ü–æ–¥–∫–ª—é—á–∏ –ø—Ä–µ–º–∏—É–º üëë –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ üÜì\n\n"
                       f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: —Ç–æ–ª—å–∫–æ 1 –∑–∞–ø—Ä–æ—Å –≤ –¥–µ–Ω—å, –æ–¥–∏–Ω –∞—É—Ç—Ñ–∏—Ç\n\n"
                       f"–ü—Ä–µ–º–∏—É–º: –±–µ–∑–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–≤–∞ –∞—É—Ç—Ñ–∏—Ç–∞")

    return result_text


# texts for /gender command
async def load_gender_and_style_info(gender_text: list, genders: dict):
    temp_genders = await select_all_genders_info()
    gender_text.append(f"–¢–≤–æ–π –ø–æ–ª? {''.join([x['gender_emoji'] for x in temp_genders.values()])}")

    for key in temp_genders:
        genders.setdefault(key, {
            f"{temp_genders[key]['gender_emoji']} {temp_genders[key]['gender_full_name']}"
        })

GENDER_TEXT = []
GENDERS = {}

# texts for /style command
STYLE_TEXT = "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?"
# Clothing styles
STYLES = {
    # male
    "m": {
        "–ö–ª–∞—Å—Å–∏–∫–∞": "classic",
        "–ö—ç–∂—É–∞–ª": "casual",
        "–°–ø–æ—Ä—Ç": "sport"
    },
    # female
    "f": {
        "–ö–ª–∞—Å—Å–∏–∫–∞": "classic",
        "–ö—ç–∂—É–∞–ª": "casual",
        "–°–ø–æ—Ä—Ç": "sport"
    }
}

STYLES_ID = {
    # male
    "m": {
        "–ö–ª–∞—Å—Å–∏–∫–∞": 1,
        "–ö—ç–∂—É–∞–ª": 2,
        "–°–ø–æ—Ä—Ç": 3
    },
    # female
    "f": {
        "–ö–ª–∞—Å—Å–∏–∫–∞": 4,
        "–ö—ç–∂—É–∞–ª": 5,
        "–°–ø–æ—Ä—Ç": 6
    }
}

GEO_TEXT = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º üìç"